{
  "name": "journal",
  "version": "0.8.1",
  "description": "Journal",
  "main": "gulpfile.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jamiefdhurst/journal.git"
  },
  "keywords": [
    "Journal"
  ],
  "author": "jamiefdhurst",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jamiefdhurst/journal/issues"
  },
  "homepage": "https://github.com/jamiefdhurst/journal#readme",
  "devDependencies": {
    "bourbon": "^7.0.0",
    "gulp": "^4.0.2",
    "gulp-load-plugins": "^1.6.0",
    "gulp-rename": "^1.4.0",
    "gulp-sass": "^5.1.0",
    "gulp-uglify": "^3.0.2",
    "medium-editor": "^5.23.3",
    "node-sass": "^8.0.0",
    "normalize.css": "^8.0.1",
    "webpack": "^5.24.3",
    "webpack-stream": "^6.1.2"
  },
  "overrides": {
    "chokidar": "3.5.3",
    "glob-parent": "6.0.2"
  }
}
db.Connect(configuration.DatabasePath); err != nil {
		log.Printf("Database error - please verify that the %s path is available and writable.\n", configuration.DatabasePath)
		os.Exit(1)
	}

	// Create Giphy adapter
	giphyAPIKey := os.Getenv("J_GIPHY_API_KEY")
	if giphyAPIKey != "" {
		log.Println("Enabling GIPHY client...")
		container.Giphy = &giphy.Client{APIKey: giphyAPIKey, Client: &json.Client{}}
	}

	// Create table if required
	container.Db = db
	var err error
	js := model.Journals{Container: container}
	if err = js.CreateTable(); err != nil {
		log.Panicln(err)
	}

	router := router.NewRouter(container)
	server := &http.Server{Addr: ":" + configuration.Port, Handler: router}

	if !configuration.EnableCreate {
		log.Println("Article creating is disabled...")
	}
	if !configuration.EnableEdit {
		log.Println("Article editing is disabled...")
	}

	log.Printf("Ready and listening on port %s...\n", configuration.Port)
	err = router.StartAndServe(server)

	// Close cleanly
	db.Close()
	if err != nil {
		log.Fatal("Error reported: ", err)
	}
}
